{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\elsow\\\\Documents\\\\React Projects\\\\videoChatApp\\\\client\\\\src\\\\SocketContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useRef, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport { Socket } from 'socket.io';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nconst socket = io('http://localhost:5000');\n\nconst ContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [stream, setStream] = useState(null);\n  const [me, setMe] = useState('');\n  const [call, setCall] = useState({});\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [callEnded, setCallEnded] = useState(false);\n  const [name, setName] = useState('');\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef();\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(currentStream => {\n      setStream(currentStream);\n      myVideo.current.srcObject = currentStream;\n    });\n    socket.on('me', id => setMe(id));\n    socket.on('calluser', ({\n      from,\n      name: callerName,\n      signal\n    }) => {\n      setCall({\n        isRecievedCall: true,\n        from,\n        name: callerName,\n        signal\n      });\n    });\n  }, []);\n\n  const answerCall = () => {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('answercall', {\n        signal: data,\n        to: call.from\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    peer.signal(call.signal);\n    connectionRef.current = peer;\n  };\n\n  const callUser = id => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('calluser', {\n        userToCall: id,\n        signalData: data,\n        from: me,\n        name\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    socket.on('callaccepted', signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    });\n    connectionRef.current = peer;\n  };\n\n  const leaveCall = () => {\n    setCallEnded(true);\n    connectionRef.current.destroy();\n    window.location.reload();\n  };\n\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: {\n      call,\n      callAccepted,\n      myVideo,\n      userVideo,\n      stream,\n      name,\n      setName,\n      callEnded,\n      me,\n      callUser,\n      leaveCall,\n      answerCall\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ContextProvider, \"H0ULBEb3qnyBYDLhTXzUqsNopvY=\");\n\n_c = ContextProvider;\nexport { ContextProvider, SocketContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["C:/Users/elsow/Documents/React Projects/videoChatApp/client/src/SocketContext.js"],"names":["React","createContext","useState","useRef","useEffect","io","Peer","Socket","SocketContext","socket","ContextProvider","children","stream","setStream","me","setMe","call","setCall","callAccepted","setCallAccepted","callEnded","setCallEnded","name","setName","myVideo","userVideo","connectionRef","navigator","mediaDevices","getUserMedia","video","audio","then","currentStream","current","srcObject","on","id","from","callerName","signal","isRecievedCall","answerCall","peer","initiator","trickle","data","emit","to","callUser","userToCall","signalData","leaveCall","destroy","window","location","reload"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useRef, useEffect} from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport Peer from 'simple-peer';\r\nimport { Socket } from 'socket.io';\r\n\r\nconst SocketContext = createContext();\r\n\r\nconst socket = io('http://localhost:5000');\r\n\r\nconst ContextProvider = ({ children}) => {\r\n    const [stream, setStream] = useState(null);\r\n    const [me, setMe] = useState('');\r\n    const [call, setCall] = useState({});\r\n    const [callAccepted, setCallAccepted] = useState(false);\r\n    const [callEnded, setCallEnded] = useState(false);\r\n    const [name, setName] = useState('');\r\n    \r\n    const myVideo = useRef();\r\n    const userVideo = useRef();\r\n    const connectionRef = useRef();\r\n\r\n    useEffect(() => {\r\n        navigator.mediaDevices.getUserMedia({video: true, audio: true})\r\n        .then((currentStream) => {\r\n                setStream(currentStream);\r\n\r\n                myVideo.current.srcObject = currentStream;\r\n        })\r\n        socket.on('me', (id) => setMe(id))\r\n        socket.on('calluser', ({from, name: callerName, signal}) => {\r\n                setCall({ isRecievedCall: true, from, name: callerName, signal})\r\n        });\r\n    }, []);\r\n    const answerCall = () =>{\r\n        setCallAccepted(true)\r\n        const peer = new Peer({initiator: false, trickle: false, stream});\r\n        peer.on('signal', (data) => {\r\n            socket.emit('answercall', {signal: data, to: call.from});\r\n        })\r\n\r\n        peer.on('stream', (currentStream) => {\r\n            userVideo.current.srcObject = currentStream;\r\n        })\r\n\r\n        peer.signal(call.signal)\r\n\r\n        connectionRef.current = peer;\r\n\r\n    }\r\n    const callUser = (id) => {\r\n        const peer = new Peer({initiator: true, trickle: false, stream});\r\n\r\n        peer.on('signal', (data) => {\r\n            socket.emit('calluser', {userToCall: id, signalData: data, from: me, name});\r\n        })\r\n\r\n        peer.on('stream', (currentStream) => {\r\n            userVideo.current.srcObject = currentStream;\r\n        })\r\n\r\n        socket.on('callaccepted', (signal) =>{\r\n            setCallAccepted(true);\r\n            peer.signal(signal);\r\n        })\r\n\r\n        connectionRef.current = peer;\r\n    }\r\n\r\n    const leaveCall = () => {\r\n        setCallEnded(true);\r\n        connectionRef.current.destroy();\r\n\r\n        window.location.reload();\r\n\r\n    }\r\n\r\n    return (\r\n        <SocketContext.Provider value={{call,callAccepted,myVideo,userVideo,stream,name,setName,callEnded,me,callUser,leaveCall,answerCall,}}>\r\n            {children}\r\n\r\n        </SocketContext.Provider>\r\n    );\r\n}\r\n\r\nexport{ ContextProvider, SocketContext};"]},"metadata":{},"sourceType":"module"}